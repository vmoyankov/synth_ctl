#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Dec 24, 2017 04:56:24 PM


import os
import sys
import subprocess
import time

import pypm

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

try:
    from subprocess import DEVNULL # py3k
except ImportError:
    DEVNULL = open(os.devnull, 'rwb')

dev = None
drums = []

class Drum:
    min_note = 27
    max_note = 87

    def __init__(self, dev, note=min_note):
        self.note = note
        self.dev = dev

    def play(self, vel=127):
        if self.dev is not None:
            self.dev.WriteShort(0x99, self.note, vel)

    def note_up(self):
        self.note += 1
        if self.note > self.max_note:
            self.note = self.min_note
        self.play()

    def note_down(self):
        self.note -= 1
        if self.note < self.min_note:
            self.note = self.max_note
        self.play()

    def set_note(self, note):
        self.note = note
        self.play()


def connect(name='Synth input'):
    for dev in range(pypm.CountDevices()):
        interf,p_name,inp,outp,opened = pypm.GetDeviceInfo(dev)
        if (outp == 1) and name in p_name:
            port = pypm.Output(dev, 0)
            return port
    return None



prognames = [
    'Acoustic Grand Piano',
    'Bright Acoustic Piano',
    'Electric Grand Piano',
    'Honky-tonk Piano',
    'Electric Piano 1',
    'Electric Piano 2',
    'Harpsichord',
    'Clavi',
    'Celesta',
    'Glockenspiel',
    'Music Box',
    'Vibraphone',
    'Marimba',
    'Xylophone',
    'Tubular Bells',
    'Dulcimer',
    'Drawbar Organ',
    'Percussive Organ',
    'Rock Organ',
    'Church Organ',
    'Reed Organ',
    'Accordion',
    'Harmonica',
    'Tango Accordion',
    'Acoustic Guitar (nylon)',
    'Acoustic Guitar (steel)',
    'Electric Guitar (jazz)',
    'Electric Guitar (clean)',
    'Electric Guitar (muted)',
    'Overdriven Guitar',
    'Distortion Guitar',
    'Guitar harmonics',
    'Acoustic Bass',
    'Electric Bass (finger)',
    'Electric Bass (pick)',
    'Fretless Bass',
    'Slap Bass 1',
    'Slap Bass 2',
    'Synth Bass 1',
    'Synth Bass 2',
    'Violin',
    'Viola',
    'Cello',
    'Contrabass',
    'Tremolo Strings',
    'Pizzicato Strings',
    'Orchestral Harp',
    'Timpani',
    'String Ensemble 1',
    'String Ensemble 2',
    'SynthStrings 1',
    'SynthStrings 2',
    'Choir Aahs',
    'Voice Oohs',
    'Synth Voice',
    'Orchestra Hit',
    'Trumpet',
    'Trombone',
    'Tuba',
    'Muted Trumpet',
    'French Horn',
    'Brass Section',
    'SynthBrass 1',
    'SynthBrass 2',
    'Soprano Sax',
    'Alto Sax',
    'Tenor Sax',
    'Baritone Sax',
    'Oboe',
    'English Horn',
    'Bassoon',
    'Clarinet',
    'Piccolo',
    'Flute',
    'Recorder',
    'Pan Flute',
    'Blown Bottle',
    'Shakuhachi',
    'Whistle',
    'Ocarina',
    'Lead 1 (square)',
    'Lead 2 (sawtooth)',
    'Lead 3 (calliope)',
    'Lead 4 (chiff)',
    'Lead 5 (charang)',
    'Lead 6 (voice)',
    'Lead 7 (fifths)',
    'Lead 8 (bass + lead)',
    'Pad 1 (new age)',
    'Pad 2 (warm)',
    'Pad 3 (polysynth)',
    'Pad 4 (choir)',
    'Pad 5 (bowed)',
    'Pad 6 (metallic)',
    'Pad 7 (halo)',
    'Pad 8 (sweep)',
    'FX 1 (rain)',
    'FX 2 (soundtrack)',
    'FX 3 (crystal)',
    'FX 4 (atmosphere)',
    'FX 5 (brightness)',
    'FX 6 (goblins)',
    'FX 7 (echoes)',
    'FX 8 (sci-fi)',
    'Sitar',
    'Banjo',
    'Shamisen',
    'Koto',
    'Kalimba',
    'Bag pipe',
    'Fiddle',
    'Shanai',
    'Tinkle Bell',
    'Agogo',
    'Steel Drums',
    'Woodblock',
    'Taiko Drum',
    'Melodic Tom',
    'Synth Drum',
    'Reverse Cymbal',
    'Guitar Fret Noise',
    'Breath Noise',
    'Seashore',
    'Bird Tweet',
    'Telephone Ring',
    'Helicopter',
    'Applause',
    'Gunshot',
        ]

instr = 0;

def d1d():
    drums[0].note_down()

def d1u():
    drums[0].note_up()

def d2d():
    drums[1].note_down()

def d2u():
    drums[1].note_up()

def d3d():
    drums[2].note_down()

def d3u():
    drums[2].note_up()

def d4d():
    drums[3].note_down()

def d4u():
    drums[3].note_up()

def drum1():
    drums[0].play()

def drum2():
    drums[1].play()

def drum3():
    drums[2].play()

def drum4():
    drums[3].play()

def drum5():
    drums[4].play()
def d5d():
    drums[4].note_down()
def d5u():
    drums[4].note_up()

def drum6():
    drums[5].play()
def d6d():
    drums[5].note_down()
def d6u():
    drums[5].note_up()

def drum7():
    drums[6].play()
def d7d():
    drums[6].note_down()
def d7u():
    drums[6].note_up()

def drum8():
    drums[7].play()
def d8d():
    drums[7].note_down()
def d8u():
    drums[7].note_up()


def set_instr(i):
    global w
    l1 = w.Label1
    print "Set instrument: %s" % i
    l1.config(text=prognames[i])
    dev.WriteShort(0xc0, i)
    dev.WriteShort(0x90, 69, 127)
    time.sleep(0.25)
    dev.WriteShort(0x80, 69, 0)

def s_dn():
    global instr
    instr += 1
    if instr > 127:
        instr = 0
    set_instr(instr)

def s_up():
    global instr
    instr -= 1
    if instr < 0:
        instr = 127
    set_instr(instr)

def kbd_event(event):
    id = '12345678'.find(event.char)
    if id >= 0:
        try:
            drums[id].play()
        except ValueError:
            pass


def start_synth():
    #stop_synth()
    subprocess.Popen([
                'pasuspender', '--',
                'jackd', '-d', 'alsa', '--device', 'hw:0',
                '--rate', '44100',
                '--period', '128'
            ],
            stdin=DEVNULL, 
            stdout=DEVNULL,
            stderr=DEVNULL)
    time.sleep(1)
    subprocess.Popen([
                'fluidsynth', '--server', '--no-shell',
                '--audio-driver=jack', '--connect-jack-outputs',
                '--reverb=0', '--chorus=0', '--gain=0.8',
                '--sample-rate=44100',
                '/usr/share/sounds/sf2/FluidR3_GM.sf2'
            ],
            stdin=DEVNULL, 
            stdout=DEVNULL,
            stderr=DEVNULL)
    time.sleep(1)

def stop_synth():

    print("Stopping fluidsyth")
    subprocess.call(['pkill', 'fluidsynth'])
    #time.sleep(1)
    print("Stopping jackd")
    subprocess.call(['pkill', 'jackd'])
    #time.sleep(1)

def init(top, gui, *args, **kwargs):
    global w, top_level, root, drums, dev
    w = gui
    top_level = top
    root = top

    start_synth()
    dev = connect()
    for note in (36,38,42,51,53,65,78,79):
        drums.append(Drum(dev, note))

def destroy_window():
    # Function which closes the window.
    global top_level

    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import sctl
    sctl.vp_start_gui()


