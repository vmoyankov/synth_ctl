#############################################################################
# Generated by PAGE version 4.9
# in conjunction with Tcl version 8.6
set vTcl(timestamp) ""




#############################################################################
## vTcl Code to Load Stock Images


if {![info exist vTcl(sourcing)]} {
#############################################################################
## Procedure:  vTcl:rename

proc ::vTcl:rename {name} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.
    regsub -all "\\." $name "_" ret
    regsub -all "\\-" $ret "_" ret
    regsub -all " " $ret "_" ret
    regsub -all "/" $ret "__" ret
    regsub -all "::" $ret "__" ret

    return [string tolower $ret]
}

#############################################################################
## Procedure:  vTcl:image:create_new_image

proc ::vTcl:image:create_new_image {filename {description {no description}} {type {}} {data {}}} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.
    # Does the image already exist?
    if {[info exists ::vTcl(images,files)]} {
        if {[lsearch -exact $::vTcl(images,files) $filename] > -1} { return }
    }
    if {![info exists ::vTcl(sourcing)] && [string length $data] > 0} {
        set object [image create  [vTcl:image:get_creation_type $filename]  -data $data]
    } else {
        # Wait a minute... Does the file actually exist?
        if {! [file exists $filename] } {
            # Try current directory
            set script [file dirname [info script]]
            set filename [file join $script [file tail $filename] ]
        }

        if {![file exists $filename]} {
            set description "file not found!"
            ## will add 'broken image' again when img is fixed, for
            ## now create empty
            set object [image create photo -width 1 -height 1]
        } else {
            set object [image create  [vTcl:image:get_creation_type $filename]  -file $filename]
        }
    }

    set reference [vTcl:rename $filename]
    set ::vTcl(images,$reference,image)       $object
    set ::vTcl(images,$reference,description) $description
    set ::vTcl(images,$reference,type)        $type
    set ::vTcl(images,filename,$object)       $filename

    lappend ::vTcl(images,files) $filename
    lappend ::vTcl(images,$type) $object
    set ::vTcl(imagefile,$object) $filename   ;# Rozen
    # return image name in case caller might want it
    return $object
}

#############################################################################
## Procedure:  vTcl:image:get_image

proc ::vTcl:image:get_image {filename} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.

    set reference [vTcl:rename $filename]

    # Let's do some checking first
    if {![info exists ::vTcl(images,$reference,image)]} {
        # Well, the path may be wrong; in that case check
        # only the filename instead, without the path.

        set imageTail [file tail $filename]

        foreach oneFile $::vTcl(images,files) {
            if {[file tail $oneFile] == $imageTail} {
                set reference [vTcl:rename $oneFile]
                break
            }
        }
    }
    # Rozen. There follows a hack in case one wants to rerun a tcl
    # file which contains a file name where an image is expected.
    if {![info exists ::vTcl(images,$reference,image)]} {
        set ::vTcl(images,$reference,image)  [vTcl:image:create_new_image $filename]
    }
    return $::vTcl(images,$reference,image)
}

#############################################################################
## Procedure:  vTcl:image:get_creation_type

proc ::vTcl:image:get_creation_type {filename} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.

    switch [string tolower [file extension $filename]] {
        .ppm -
        .jpg -
        .bmp -
        .gif    {return photo}
        .xbm    {return bitmap}
        default {return photo}
    }
}

foreach img {


            } {
    eval set _file [lindex $img 0]
    vTcl:image:create_new_image\
        $_file [lindex $img 1] [lindex $img 2] [lindex $img 3]
}

}
#############################################################################
## vTcl Code to Load User Images

catch {package require Img}

foreach img {

        {{$[pwd]/images/up.gif} {user image} user {}}
        {{$[pwd]/images/down.gif} {user image} user {}}

            } {
    eval set _file [lindex $img 0]
    vTcl:image:create_new_image\
        $_file [lindex $img 1] [lindex $img 2] [lindex $img 3]
}

set vTcl(actual_gui_bg) #d9d9d9
set vTcl(actual_gui_fg) #000000
set vTcl(actual_gui_menu_bg) #d9d9d9
set vTcl(actual_gui_menu_fg) #000000
set vTcl(complement_color) #d9d9d9
set vTcl(analog_color_p) #d9d9d9
set vTcl(analog_color_m) #d9d9d9
set vTcl(active_fg) #000000
set vTcl(actual_gui_menu_active_bg)  #d8d8d8
set vTcl(active_menu_fg) #000000
#################################
#LIBRARY PROCEDURES
#


if {[info exists vTcl(sourcing)]} {

proc vTcl:project:info {} {
    set base .top37
    namespace eval ::widgets::$base {
        set dflt,origin 0
        set runvisible 1
    }
    namespace eval ::widgets_bindings {
        set tagslist _TopLevel
    }
    namespace eval ::vTcl::modules::main {
        set procs {
        }
        set compounds {
        }
        set projectType single
    }
}
}

#################################
# USER DEFINED PROCEDURES
#

#################################
# GENERATED GUI PROCEDURES
#

proc vTclWindow.top37 {base} {
    if {$base == ""} {
        set base .top37
    }
    if {[winfo exists $base]} {
        wm deiconify $base; return
    }
    set top $base
    ###################
    # CREATING WIDGETS
    ###################
    vTcl::widgets::core::toplevel::createCmd $top -class Toplevel \
        -relief raised -background {#d9d9d9} 
    wm focusmodel $top passive
    wm geometry $top 586x343+404+124
    update
    # set in toplevel.wgt.
    global vTcl
    set vTcl(save,dflt,origin) 0
    wm maxsize $top 1351 738
    wm minsize $top 1 1
    wm overrideredirect $top 0
    wm resizable $top 1 1
    wm deiconify $top
    wm title $top "Synth Control"
    vTcl:DefineAlias "$top" "Toplevel1" vTcl:Toplevel:WidgetProc "" 1
    bind $top <Key> {
        lambda e: xxx(e)
    }
    button $top.but38 \
        -activebackground {#d9d9d9} -background {#d9d9d9} -command drum1 \
        -foreground {#000000} -highlightcolor black -text 1 
    vTcl:DefineAlias "$top.but38" "Button1" vTcl:WidgetProc "Toplevel1" 1
    button $top.cpd39 \
        -activebackground {#d9d9d9} -activeforeground black \
        -background {#d9d9d9} -command drum2 -foreground {#000000} \
        -highlightcolor black -text 2 
    vTcl:DefineAlias "$top.cpd39" "Button2" vTcl:WidgetProc "Toplevel1" 1
    button $top.cpd40 \
        -activebackground {#d9d9d9} -activeforeground black \
        -background {#d9d9d9} -command drum3 -foreground {#000000} \
        -highlightcolor black -text 3 
    vTcl:DefineAlias "$top.cpd40" "Button3" vTcl:WidgetProc "Toplevel1" 1
    button $top.cpd41 \
        -activebackground {#d9d9d9} -activeforeground black \
        -background {#d9d9d9} -command drum4 -foreground {#000000} \
        -highlightcolor black -text 4 
    vTcl:DefineAlias "$top.cpd41" "Button4" vTcl:WidgetProc "Toplevel1" 1
    button $top.but46 \
        -activebackground {#d9d9d9} -background {#d9d9d9} -command d1u \
        -foreground {#000000} -height 26 -highlightcolor black \
        -image [vTcl:image:get_image [file join / home venkom page page images up.gif]] \
        -width 26 
    button $top.cpd47 \
        -activebackground {#d9d9d9} -activeforeground black \
        -background {#d9d9d9} -command d1d -foreground {#000000} -height 24 \
        -highlightcolor black \
        -image [vTcl:image:get_image [file join / home venkom page page images down.gif]] \
        -width 24 
    vTcl:DefineAlias "$top.cpd47" "Button10" vTcl:WidgetProc "Toplevel1" 1
    button $top.cpd48 \
        -activebackground {#d9d9d9} -activeforeground black \
        -background {#d9d9d9} -command d2u -foreground {#000000} -height 26 \
        -highlightcolor black \
        -image [vTcl:image:get_image [file join / home venkom page page images up.gif]] \
        -width 26 
    vTcl:DefineAlias "$top.cpd48" "Button11" vTcl:WidgetProc "Toplevel1" 1
    button $top.cpd49 \
        -activebackground {#d9d9d9} -activeforeground black \
        -background {#d9d9d9} -command d2d -foreground {#000000} -height 24 \
        -highlightcolor black \
        -image [vTcl:image:get_image [file join / home venkom page page images down.gif]] \
        -width 24 
    vTcl:DefineAlias "$top.cpd49" "Button12" vTcl:WidgetProc "Toplevel1" 1
    button $top.cpd50 \
        -activebackground {#d9d9d9} -activeforeground black \
        -background {#d9d9d9} -command d3u -foreground {#000000} -height 26 \
        -highlightcolor black \
        -image [vTcl:image:get_image [file join / home venkom page page images up.gif]] \
        -width 26 
    vTcl:DefineAlias "$top.cpd50" "Button13" vTcl:WidgetProc "Toplevel1" 1
    button $top.cpd51 \
        -activebackground {#d9d9d9} -activeforeground black \
        -background {#d9d9d9} -command d4u -foreground {#000000} -height 26 \
        -highlightcolor black \
        -image [vTcl:image:get_image [file join / home venkom page page images up.gif]] \
        -width 26 
    vTcl:DefineAlias "$top.cpd51" "Button14" vTcl:WidgetProc "Toplevel1" 1
    button $top.cpd52 \
        -activebackground {#d9d9d9} -activeforeground black \
        -background {#d9d9d9} -command d3d -foreground {#000000} -height 24 \
        -highlightcolor black \
        -image [vTcl:image:get_image [file join / home venkom page page images down.gif]] \
        -width 24 
    vTcl:DefineAlias "$top.cpd52" "Button15" vTcl:WidgetProc "Toplevel1" 1
    button $top.cpd53 \
        -activebackground {#d9d9d9} -activeforeground black \
        -background {#d9d9d9} -command d4d -foreground {#000000} -height 24 \
        -highlightcolor black \
        -image [vTcl:image:get_image [file join / home venkom page page images down.gif]] \
        -width 24 
    vTcl:DefineAlias "$top.cpd53" "Button16" vTcl:WidgetProc "Toplevel1" 1
    label $top.lab54 \
        -background {#d9d9d9} -foreground {#000000} -relief sunken 
    vTcl:DefineAlias "$top.lab54" "Label1" vTcl:WidgetProc "Toplevel1" 1
    button $top.but55 \
        -activebackground {#d9d9d9} -background {#d9d9d9} -command s_up \
        -foreground {#000000} -highlightcolor black \
        -image [vTcl:image:get_image [file join / home venkom page page images down.gif]] 
    vTcl:DefineAlias "$top.but55" "Button5" vTcl:WidgetProc "Toplevel1" 1
    button $top.but56 \
        -activebackground {#d9d9d9} -background {#d9d9d9} -command s_dn \
        -foreground {#000000} -highlightcolor black \
        -image [vTcl:image:get_image [file join / home venkom page page images up.gif]] 
    vTcl:DefineAlias "$top.but56" "Button6" vTcl:WidgetProc "Toplevel1" 1
    ###################
    # SETTING GEOMETRY
    ###################
    place $top.but38 \
        -in $top -x 40 -y 50 -width 67 -relwidth 0 -height 56 -relheight 0 \
        -anchor nw -bordermode ignore 
    place $top.cpd39 \
        -in $top -x 160 -y 50 -width 67 -height 56 -anchor nw \
        -bordermode inside 
    place $top.cpd40 \
        -in $top -x 280 -y 50 -width 67 -height 56 -anchor nw \
        -bordermode inside 
    place $top.cpd41 \
        -in $top -x 400 -y 50 -width 67 -height 56 -anchor nw \
        -bordermode inside 
    place $top.but46 \
        -in $top -x 110 -y 50 -width 24 -relwidth 0 -height 24 -relheight 0 \
        -anchor nw -bordermode ignore 
    place $top.cpd47 \
        -in $top -x 110 -y 80 -width 24 -relwidth 0 -height 24 -relheight 0 \
        -anchor nw -bordermode inside 
    place $top.cpd48 \
        -in $top -x 230 -y 50 -width 24 -height 24 -anchor nw \
        -bordermode inside 
    place $top.cpd49 \
        -in $top -x 230 -y 80 -width 24 -height 24 -anchor nw \
        -bordermode inside 
    place $top.cpd50 \
        -in $top -x 350 -y 50 -width 24 -height 24 -anchor nw \
        -bordermode inside 
    place $top.cpd51 \
        -in $top -x 470 -y 50 -width 24 -height 24 -anchor nw \
        -bordermode inside 
    place $top.cpd52 \
        -in $top -x 350 -y 80 -width 24 -height 24 -anchor nw \
        -bordermode inside 
    place $top.cpd53 \
        -in $top -x 470 -y 80 -width 24 -height 24 -anchor nw \
        -bordermode inside 
    place $top.lab54 \
        -in $top -x 40 -y 140 -width 206 -relwidth 0 -height 28 -relheight 0 \
        -anchor nw -bordermode ignore 
    place $top.but55 \
        -in $top -x 40 -y 170 -width 94 -relwidth 0 -height 24 -relheight 0 \
        -anchor nw -bordermode ignore 
    place $top.but56 \
        -in $top -x 140 -y 170 -width 104 -relwidth 0 -height 24 -relheight 0 \
        -anchor nw -bordermode ignore 

    vTcl:FireEvent $base <<Ready>>
}

#############################################################################
## Binding tag:  _TopLevel

bind "_TopLevel" <<Create>> {
    if {![info exists _topcount]} {set _topcount 0}; incr _topcount
}
bind "_TopLevel" <<DeleteWindow>> {
    if {[set ::%W::_modal]} {
                vTcl:Toplevel:WidgetProc %W endmodal
            } else {
                destroy %W; if {$_topcount == 0} {exit}
            }
}
bind "_TopLevel" <Destroy> {
    if {[winfo toplevel %W] == "%W"} {incr _topcount -1}
}

Window show .
Window show .top37

